# {{PROBLEM}} Multi-Class Planned Design Recipe

## 1. Describe the Problem

As a customer
So that I can check if I want to order something
I would like to see a list of dishes with prices.

As a customer
So that I can order the meal I want
I would like to be able to select some number of several available dishes.

As a customer
So that I can verify that my order is correct
I would like to see an itemised receipt with a grand total.

Use the twilio-ruby gem to implement this next one. You will need to use doubles too.

As a customer
So that I am reassured that my order will be delivered on time
I would like to receive a text such as "Thank you! Your order was placed and will be delivered before 18:52" after I have ordered.

Fair warning: if you push your Twilio API Key to a public Github repository, anyone will be able to see and use it. What are the security implications of that? How will you keep that information out of your repository?



## 2. Design the Class System

```
                                      ┌───────────────────────────────────┐
                                      │ Menu: contains instances of Dish  │
                                      │                                   │
  ┌──────────────────────────┐        │ -Methods:-view(category)          │
  │                          │        │            (views all starter/main│
  │  Dish                    │        │             /dessert/drink)       │
  │                          │        │                                   │
  │  Title                   │        │                                   │
  │                          │        │          -view_all (view whole    │
  │  Description             │        │                      menu)        │
  │                          ├────────►                                   │
  │  Price                   │        │          -add (adds item to menu) │
  │                          │        │                                   │
  │  Category                │        │          -remove (removes item    │
  └────────────┬─────────────┘        │               from menu)          │
               │                      └───────────────────────────────────┘
               │
               │                       ┌────────────────────────────────────────────┐
               └───────────────────────►                                            │
                                       │ Order                                      │
┌────────────────────────────────┐     │                                            │
│ Receipt: contains instance  of │     │ Methods:-view (view everything scheduled   │
│            Order               │     │            to be ordered)                  │
│                                │     │                                            │
│ Methods:-view (view itemised   │     │         -add (adds dish to order list)     │
│            receipt)            ◄─────┤                      (takes num)           │
│                                │     │                                            │
│         -total(total cost of   │     │         -remove (removes a dish            │
│            dishes selected+tip)│     │            from the order list)            │
│                                │     │                                            │
│         -adjust_tip(percent)   │     └────────────────────────────────────────────┘
│            (changes from 12.5  │
│              to percent)       │
│                                │
│         -text (sends           │
│             confirmation text) │
│                                │
│                                │
└────────────────────────────────┘
```

_Also design the interface of each class in more detail._

```ruby

class Dish
  def initialize
    # title, description, price, category
  end
end


class Menu
  def initialize
    Creates empty menu list
  end

  def add(dish)
    Adds dish to menu list
  end

  def remove(dish)
    Removes dish from menu list
  end

  def view(category)
    Views dishes of a certain category
  end

  def view_all
    Views entire menu
  end
end

Class Order
  def initialize
    Empty order list
  end

  def add(dish, quantity)
    Adds dish to order list
  end

  def remove(dish, quantity)
    Removes dish from order list
  end

  def view
    Views all dishes currently in order list
  end
end


class Receipt
  def initialize(order)
    #order
  end

  def view
    Views receipt itemised
  end

  def total
    Views receipt itemised
  end

  def adjust_tip
    Views receipt itemised
  end

  def confirm
    Sends text
  end
end

```

## 3. Create Examples as Integration Tests

_Create examples of the classes being used together in different situations and
combinations that reflect the ways in which the system will be used._

```ruby
# EX

```

## 4. Create Examples as Unit Tests

INTEGRATION TESTS

#Menu
-a menu with one item in one category

--view shows the correct item
menu = Menu.new
chips = Dish.new('French Fries','Deep fried thin cut potatoes',3.99,'side')
menu.add(chips)
menu.view('side') => 'French Fries: Deep fried thin cut potatoes. £3.99'

-a menu with multiple items in one category

--view shows the correct items
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
onion_rings = Dish.new('Onion Rings', 'Deep fried battered onion rings', 4.99, 'side')
menu = Menu.new
menu.add(chips)
menu.add(onion_rings)
menu.view('side') => 
'French Fries: Deep fried thin cut potatoes £3.99'
'Onion Rings: Deep fried battered onion rings £4.99'

-a menu with one item in multiple categories

--view_all put's items sorted by category
menu = Menu.new
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
wings = Dish.new('Buffalo Wings', 'Deep fried chicken wings in a spicy sauce', 9.99, 'main')
menu.add(chips)
menu.add(wings)
menu.view_all => 
'Starters'
'Mains'
'Buffalo Wings: Deep fried chicken wings in a spicy sauce £9.99'
'Sides'
'French Fries: Deep fried thin cut potatoes £3.99'
'Drinks'
'Desserts'

-a menu with multiple items in multiple categories

--view_all put's items sorted by category and displays correctly
Menu = Menu.new
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
onion_rings = Dish.new('Onion Rings', 'Deep fried battered onion rings', 4.99, 'side')
wings = Dish.new('Buffalo Wings', 'Deep fried chicken wings in a spicy sauce', 9.99, 'main')
burger = Dish.new('Cheeseburger', 'Cheeseburger with lettuce onion and tomato', 12.99, 'main') 
menu.add(chips)
menu.add(onion_rings)
menu.add(wings)
menu.add(burger)
menu.view_all => 
'Starters'
'Mains'
'Buffalo Wings: Deep fried chicken wings in a spicy sauce £9.99'
'Cheeseburger: Cheeseburger with lettuce onion and tomato £12.99'
Sides'
'French Fries: Deep fried thin cut potatoes £3.99'
'Onion Rings: Deep fried battered onion rings £4.99'
'Drinks'
'Desserts'

--remove deletes an item from the menu
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
onion_rings = Dish.new('Onion Rings', 'Deep fried battered onion rings', 4.99, 'side')
wings = Dish.new('Buffalo Wings', 'Deep fried chicken wings in a spicy sauce', 9.99, 'main')
burger = Dish.new('Cheeseburger', 'Cheeseburger with lettuce onion and tomato', 12.99, 'main') 
menu.add(chips)
menu.add(onion_rings)
menu.add(wings)
menu.add(burger)
menu.remove(burger)
menu.view_all => 
'Sides'
'French Fries: Deep fried thin cut potatoes £3.99'
'Onion Rings: Deep fried battered onion rings £4.99'
'Mains'
'Buffalo Wings: Deep fried chicken wings in a spicy sauce £9.99'

#Order
-with one item

--view item name
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
order = Order.new
order.add(chips,1)
order.view => 'French Fries'

-with multiple items

--view multiple items
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
wings = Dish.new('Buffalo Wings', 'Deep fried chicken wings in a spicy sauce', 9.99, 'main')
order = Order.new
order.add(chips,1)
order.add(wings,2)
order.view => 'French Fries x 1, Buffalo Wings x 2'

--add and remove items
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
wings = Dish.new('Buffalo Wings', 'Deep fried chicken wings in a spicy sauce', 9.99, 'main')
order = Order.new
order.add(chips,1)
order.add(wings,1)
order.remove(wings,1)
order.view => 'French Fries'

--removing items not on order list
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
order = Order.new
order.remove(chips,1) => raise error with message

chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
order = Order.new
order.add(chips,1)
order.remove(chips,2) => raise error with message



#Receipt
-with order list containing dishes

--view shows itemised bill
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
wings = Dish.new('Buffalo Wings', 'Deep fried chicken wings in a spicy sauce', 9.99, 'main')
order = Order.new
order.add(chips)
order.add(wings)
receipt = Receipt.new(order)
receipt.view => 
'French Fries: £3.99'
'Buffalo Wings: £9.99'
'Service Charge: £1.75'
'Total: £15.73'

--total gives total cost including tip
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
wings = Dish.new('Buffalo Wings', 'Deep fried chicken wings in a spicy sauce', 9.99, 'main')
order = Order.new
order.add(chips)
order.add(wings)
receipt = Receipt.new(order)
receipt.total => 15.73

--adjust_tip(percentage) changes tip percentage
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
wings = Dish.new('Buffalo Wings', 'Deep fried chicken wings in a spicy sauce', 9.99, 'main')
order = Order.new
order.add(chips)
order.add(wings)
receipt = Receipt.new(order)
receipt.adjust_tip(10)
receipt.total => 15.38

--text sends text confirmation
chips = Dish.new('French Fries', 'Deep fried thin cut potatoes', 3.99, 'side')
wings = Dish.new('Buffalo Wings', 'Deep fried chicken wings in a spicy sauce', 9.99, 'main')
order = Order.new
order.add(chips)
order.add(wings)
receipt = Receipt.new(order)
receipt.text => 
send text
"Thank you! Your order was placed and will be delivered before Time.now + 30 mins"

-an empty receipt

--view
order_list = Order.new
receipt = Receipt.new(order_list)
receipt.view => raise error with message

--total
order_list = Order.new
receipt = Receipt.new(order_list)
receipt.total => raise error with message

--adjust_tip
order_list = Order.new
receipt = Receipt.new(order_list)
receipt.adjust_tip => raise error with message

--text
order_list = Order.new
receipt = Receipt.new(order_list)
receipt.text => raise error with message


```ruby
UNIT TESTS


#Dish
-create a dish

--access title
chips = Dish.new('French Fries','Deep fried thin cut potatoes',3.99,'side')
Chips.title => 'French_fries'

--access description
chips = Dish.new('French Fries','Deep fried thin cut potatoes',3.99,'side')
Chips.description => 'Fried thin cut potatoes'

--access price
chips = Dish.new('French Fries','Deep fried thin cut potatoes',3.99,'side')
Chips.price => 3.99

--access category
chips = Dish.new('French Fries','Deep fried thin cut potatoes',3.99,'side')
Chips.category => 'side'

#Menu
-an empty menu

--view
menu = Menu.new
menu.view('starter') => raises error with message

--view_all
menu = Menu.new
menu.view_all => raises error with message

#Order
-an empty order

--view
order = Order.new
Order.view => raise error with message


```

_Encode each example as a test. You can add to the above list as you go._

## 5. Implement the Behaviour

_After each test you write, follow the test-driving process of red, green,
refactor to implement the behaviour._